name: Build and Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating releases
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.20'
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64 upx-ucl libgl1-mesa-dev xorg-dev
          go install fyne.io/fyne/v2/cmd/fyne@latest
      
      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
      
      - name: Build Windows executable
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          mkdir -p ./release
          
          # Create version flags
          VERSION_LDFLAGS="-X main.Version=${VERSION} -X main.BuildDate=${BUILD_DATE} -X main.CommitSHA=${COMMIT_SHA}"
          
          # Debug information
          echo "Build environment:"
          echo "Go version: $(go version)"
          echo "GCC version: $(x86_64-w64-mingw32-gcc --version | head -n 1)"
          echo "GOPATH: $(go env GOPATH)"
          
          # Build with CGO enabled
          echo "Building Windows executable..."
          GOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc \
          go build -v -tags "no_native_menus" -ldflags "${VERSION_LDFLAGS}" -o "./release/Attendance Tracker.exe"
          
          # Check if build was successful
          if [ -f "./release/Attendance Tracker.exe" ]; then
            echo "Build successful!"
            ls -la "./release/Attendance Tracker.exe"
          else
            echo "Build failed! No executable produced."
            exit 1
          fi
          
          # Try compressing with UPX (but don't fail if it doesn't work)
          echo "Compressing with UPX..."
          upx --best "./release/Attendance Tracker.exe" || echo "UPX compression failed, continuing without it"
      
      - name: Package additional files
        run: |
          cp LICENSE ./release/ || true
          cp README.md ./release/ || true
          cp -r assets ./release/ || true
          
          # Include verification files
          cp verify.ps1 ./release/ || true
          cp SECURITY.md ./release/VERIFICATION.txt || true
      
      - name: Generate checksums
        run: |
          cd ./release
          sha256sum "Attendance Tracker.exe" > "Attendance Tracker.exe.sha256"
          cd ..
      
      - name: Create ZIP archive
        run: |
          cd ./release
          zip -r "../Attendance-Tracker-${{ env.VERSION }}-windows.zip" .
          cd ..
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Attendance-Tracker-${{ env.VERSION }}-windows.zip
          name: Attendance Tracker ${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: attendance-tracker-${{ env.VERSION }}
          path: ./release/ 
